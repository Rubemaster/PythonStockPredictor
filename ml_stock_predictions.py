# -*- coding: utf-8 -*-
"""ML Stock Predictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11CFCZtpLeY4sUDvcGnbadUyGZ1NxB_I8
"""

import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plot


ticker="SEB-A.ST"
back_track=100;
distance_to_future=2;

stock_close = web.DataReader( ticker, data_source = "yahoo", start = "2018", end = "2020-11-01" ).filter( ["Close"] )
stock_close_array = stock_close.values

scaler = MinMaxScaler( feature_range = ( 0, 1 ) )
stock_close_scaled = scaler.fit_transform( stock_close_array )

train_with = stock_close_scaled[ 0 : , : ]

train_y, train_x = [],[]
for i in range(back_track+distance_to_future, len(train_with)):
  train_x.append(train_with[i-back_track-distance_to_future :i-distance_to_future, 0])
  train_y.append(train_with[i, 0])

train_x=np.array(train_x)
train_y=np.array(train_y)

train_x=np.reshape(train_x, (train_x.shape[0],train_x.shape[1],1))

ml_model = Sequential()
ml_model.add( LSTM( 50, return_sequences=True, input_shape= ( train_x.shape[1], 1 ) ) )
ml_model.add( LSTM( 50, return_sequences=False ) )
ml_model.add( Dense( 25 ) )
ml_model.add( Dense( 1 ) )
ml_model.compile(optimizer='adam', loss='mean_squared_error')
ml_model.fit(train_x,train_y, batch_size=1, epochs=1)

test_data = stock_close_scaled [ back_track : , :]

predict_using_x = []
for i in range(back_track+distance_to_future, len(train_with)):
  predict_using_x.append(train_with[i-back_track :i, 0])

predict_using_x=np.array(predict_using_x)
predict_using_x=np.reshape(predict_using_x, (predict_using_x.shape[0],predict_using_x.shape[1],1))

forecast = ml_model.predict(predict_using_x)
forecast = scaler.inverse_transform(forecast)


date=stock_close.reset_index()['Date']
forecast=forecast.ravel();
end_date=date[date.size-1]+pd.Timedelta(days=-80)
start_date=end_date-pd.Timedelta(days=len(forecast)-1)
interval= pd.date_range(start=start_date, end=end_date)

#forecast_dictionary = {'Date': interval, 'Forecast': forecast}
forecast_frame = pd.DataFrame({'Forecast': forecast}, index=interval)
forecast_frame.index.name = 'Date'

#Plot
plot.style.use( "classic" )
plot.figure(figsize=(16,8))
plot.title(ticker + " ML FORECAST MODEL")
plot.xlabel("TIME")
plot.ylabel("SEK")
plot.plot(stock_close,linewidth=1)
plot.plot(forecast_frame,linewidth=1)
plot.legend(["Actual", "Forecast"])
plot.plot()

date=stock_close.reset_index()['Date']
forecast=forecast.ravel();
end_date=date[date.size-1]+pd.Timedelta(days=-80)
start_date=end_date-pd.Timedelta(days=len(forecast)-1)
interval= pd.date_range(start=start_date, end=end_date)
i=-1
while date[date.size+i]==date[date.size+i-1]+pd.Timedelta(days=1):
  i-=1
last_monday=date[date.size+i]
print(type(interval[0]))
interval=[]
weeks=20;
for week in range(-weeks, weeks):
  for day in range(0, 5):
    interval.append((last_monday+pd.Timedelta(days=week*7+day)).date())
print(pd.Timestamp(2017, 1, 1, 12))